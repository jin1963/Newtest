let userAccount;
let contract;
let usdt;

const targetChainId = "0x38"; // BNB Chain Mainnet (56)

async function switchToBSC() {
  if (window.ethereum) {
    const currentChainId = await window.ethereum.request({ method: 'eth_chainId' });
    if (currentChainId !== targetChainId) {
      try {
        await window.ethereum.request({
          method: 'wallet_switchEthereumChain',
          params: [{ chainId: targetChainId }],
        });
      } catch (err) {
        alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° BNB Chain ‡∏•‡∏á‡πÉ‡∏ô Wallet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
        throw err;
      }
    }
  }
}

async function connectWallet() {
  if (window.ethereum || window.bitkeep?.ethereum) {
    window.web3 = new Web3(window.ethereum || window.bitkeep.ethereum);
    try {
      await switchToBSC(); // üîÅ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      await window.ethereum.request({ method: "eth_requestAccounts" });
      const accounts = await web3.eth.getAccounts();
      userAccount = accounts[0];
      document.getElementById("walletAddress").innerText = "‚úÖ " + userAccount;

      contract = new web3.eth.Contract(contractABI, contractAddress);
      usdt = new web3.eth.Contract(usdtABI, usdtAddress);

      let ref = new URLSearchParams(window.location.search).get("ref");
      if (!ref) ref = localStorage.getItem("ref");
      if (!ref) ref = userAccount;
      localStorage.setItem("ref", ref);

      const link = window.location.origin + window.location.pathname + "?ref=" + userAccount;
      document.getElementById("referralLink").value = link;

    } catch (e) {
      document.getElementById("walletAddress").innerText = "‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
    }
  } else {
    alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö Wallet ‡πÄ‡∏ä‡πà‡∏ô MetaMask ‡∏´‡∏£‡∏∑‡∏≠ Bitget");
  }
}

async function registerReferrer() {
  const refAddress = document.getElementById("refAddress").value;
  try {
    await contract.methods.registerReferrer(refAddress).send({ from: userAccount });
    alert("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Referrer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } catch (e) {
    alert("‚ùå ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}

async function buyToken() {
  await switchToBSC(); // üîÅ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

  const amount = document.getElementById("usdtAmount").value;
  if (!amount || isNaN(amount)) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  const value = web3.utils.toWei(amount, "ether");

  try {
    await usdt.methods.approve(contractAddress, value).send({ from: userAccount });
    await contract.methods.buyWithReferral(value).send({ from: userAccount });
    alert("‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  } catch (e) {
    alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠");
  }
}

function copyReferralLink() {
  const ref = document.getElementById("referralLink").value;
  if (ref) {
    navigator.clipboard.writeText(ref);
    alert("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏•‡πâ‡∏ß!");
  } else {
    alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå Referrer");
  }
}
